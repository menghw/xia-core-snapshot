// Generated by make-ip-conf.pl
//eth3 10.1.0.1 00:1b:21:a3:d7:45 
//eth5 192.168.0.1 00:1b:21:a3:d7:0b 

// Shared IP input path and routing table
ip :: Strip(14)
    -> CheckIPHeader(INTERFACES 10.1.0.1/255.255.255.0 192.168.0.1/255.0.0.0)
    -> rt :: StaticIPLookup(
	10.1.0.1/32 0,
	10.1.0.255/32 0,
	10.1.0.0/32 0,
	192.168.0.1/32 0,
	192.255.255.255/32 0,
	192.0.0.0/32 0,
	10.1.0.0/255.255.255.0 1,
	192.0.0.0/255.0.0.0 2,
	255.255.255.255/32 0.0.0.0 0,
	0.0.0.0/32 0,
	131.179.80.139/255.255.255.255 131.179.80.139 2);

// ARP responses are copied to each ARPQuerier and the host.
arpt :: Tee(3);

c0 :: Classifier(12/0806 20/0001, 12/0806 20/0002, 12/0800, -);

pd_eth3_0:: MQPollDevice(eth3, QUEUE 0, BURST 32, PROMISC true) -> c0; 
pd_eth3_1:: MQPollDevice(eth3, QUEUE 1, BURST 32, PROMISC true) -> c0; 
pd_eth3_2:: MQPollDevice(eth3, QUEUE 2, BURST 32, PROMISC true) -> c0; 
out0 :: IsoCPUQueue(200);
out0 -> tod_eth3_0 :: MQToDevice(eth3, QUEUE 0, BURST 32) 
out0 -> tod_eth3_1 :: MQToDevice(eth3, QUEUE 1, BURST 32) 
out0 -> tod_eth3_2 :: MQToDevice(eth3, QUEUE 2, BURST 32) 
out0 -> tod_eth3_3 :: MQToDevice(eth3, QUEUE 3, BURST 32) 
out0 -> tod_eth3_4 :: MQToDevice(eth3, QUEUE 4, BURST 32) 
out0 -> tod_eth3_5 :: MQToDevice(eth3, QUEUE 5, BURST 32) 

c0[0] -> ar0 :: ARPResponder(10.1.0.1 00:1b:21:a3:d7:45) -> out0;
arpq0 :: ARPQuerier(10.1.0.1, 00:1b:21:a3:d7:45) -> out0;
c0[1] -> arpt;
arpt[0] -> [1]arpq0;
c0[2] -> Paint(1) -> ip;
c0[3] -> Print("eth3 non-IP") -> Discard;



c1 :: Classifier(12/0806 20/0001, 12/0806 20/0002, 12/0800, -);

pd_eth5_3:: MQPollDevice(eth5, QUEUE 0, BURST 32, PROMISC true) -> c1; 
pd_eth5_4:: MQPollDevice(eth5, QUEUE 1, BURST 32, PROMISC true) -> c1; 
pd_eth5_5:: MQPollDevice(eth5, QUEUE 2, BURST 32, PROMISC true) -> c1; 
out1 :: IsoCPUQueue(200);
out1 -> tod_eth5_0 :: MQToDevice(eth5, QUEUE 0, BURST 32) 
out1 -> tod_eth5_1 :: MQToDevice(eth5, QUEUE 1, BURST 32) 
out1 -> tod_eth5_2 :: MQToDevice(eth5, QUEUE 2, BURST 32) 
out1 -> tod_eth5_3 :: MQToDevice(eth5, QUEUE 3, BURST 32) 
out1 -> tod_eth5_4 :: MQToDevice(eth5, QUEUE 4, BURST 32) 
out1 -> tod_eth5_5 :: MQToDevice(eth5, QUEUE 5, BURST 32) 

c1[0] -> ar1 :: ARPResponder(192.168.0.1 00:1b:21:a3:d7:0b) -> out1;
arpq1 :: ARPQuerier(192.168.0.1, 00:1b:21:a3:d7:0b) -> out1;
c1[1] -> arpt;
arpt[1] -> [1]arpq1;
c1[2] -> Paint(2) -> ip;
c1[3] -> Print("eth5 non-IP") -> Discard;


StaticThreadSched(pd_eth3_0 0, tod_eth3_0 0, tod_eth5_0 0);
StaticThreadSched(pd_eth3_1 1, tod_eth3_1 1, tod_eth5_1 1);
StaticThreadSched(pd_eth3_2 2, tod_eth3_2 2, tod_eth5_2 2);
StaticThreadSched(pd_eth5_3 3, tod_eth3_3 3, tod_eth5_3 3);
StaticThreadSched(pd_eth5_4 4, tod_eth3_4 4, tod_eth5_4 4);
StaticThreadSched(pd_eth5_5 5, tod_eth3_5 5, tod_eth5_5 5);

// Local delivery
toh :: ToHost;
arpt[2] -> toh;
rt[0] -> EtherEncap(0x0800, 1:1:1:1:1:1, 2:2:2:2:2:2) -> toh;

// Forwarding path for eth3
rt[1] -> DropBroadcasts
    -> cp0 :: PaintTee(1)
    -> gio0 :: IPGWOptions(10.1.0.1)
    -> FixIPSrc(10.1.0.1)
    -> dt0 :: DecIPTTL
    -> fr0 :: IPFragmenter(1500)
    -> [0]arpq0;
dt0[1] -> ICMPError(10.1.0.1, timeexceeded) -> rt;
fr0[1] -> ICMPError(10.1.0.1, unreachable, needfrag) -> rt;
gio0[1] -> ICMPError(10.1.0.1, parameterproblem) -> rt;
cp0[1] -> ICMPError(10.1.0.1, redirect, host) -> rt;

// Forwarding path for eth5
rt[2] -> DropBroadcasts
    -> cp1 :: PaintTee(2)
    -> gio1 :: IPGWOptions(192.168.0.1)
    -> FixIPSrc(192.168.0.1)
    -> dt1 :: DecIPTTL
    -> fr1 :: IPFragmenter(1500)
    -> [0]arpq1;
dt1[1] -> ICMPError(192.168.0.1, timeexceeded) -> rt;
fr1[1] -> ICMPError(192.168.0.1, unreachable, needfrag) -> rt;
gio1[1] -> ICMPError(192.168.0.1, parameterproblem) -> rt;
cp1[1] -> ICMPError(192.168.0.1, redirect, host) -> rt;
